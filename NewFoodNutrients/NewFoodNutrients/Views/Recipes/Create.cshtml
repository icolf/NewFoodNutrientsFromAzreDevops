@model NewFoodNutrients.ViewModels.RecipeFormViewModel
@{
    ViewBag.Title = "Create";
}
<form>
    <div class="form-group"></div>
    <div class="form-group">
        @Html.LabelFor(m => m.RecipeName)
        @Html.TextBoxFor(m => m.RecipeName, new { @class = "form-control", data_bind = "value: mappedViewModel.RecipeName" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.FoodTypeId)
        @Html.DropDownListFor(m => m.FoodTypeId
            ,Model.FoodTypes
            , new { @class = "form-control"
                , data_bind =
                    "options : mappedViewModel.FoodTypes" +
                    ", optionsText : 'Text'" +
                    ", optionsValue : 'Value'" +
                    ", value : selectedFoodType" /*+*/
                                                 //", optionsCaption : 'Select a food type"
            })
                
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.FoodId)
        @Html.DropDownListFor(m => m.FoodId, Model.Foods
            ,new { @class = "form-control"
                , data_bind = "options : filteredFoods" +
                              ", optionsText : 'Text'" +
                              ", optionsValue : 'Value'"
            })
    </div>
</form>

@section Scripts
{
<script type="text/javascript">
        $(document).ready(function() {
            var my = {};
            my.recipeViewModel = (function () {

                var model = @Html.Raw(Json.Encode(Model));

                var mappedViewModel = ko.mapping.fromJS(model);

                var selectedFoodType = ko.observable("");
                     
                var filteredFoods = ko.computed(function() {
                        return ko.utils.arrayFilter(mappedViewModel.Foods(),
                            function(food) {
                                var foodFilter = food.Value();
                                return foodFilter === selectedFoodType();
                            });
                    },
                    this);

                return {
                    mappedViewModel: mappedViewModel,
                    filteredFoods: filteredFoods,
                    selectedFoodType: selectedFoodType
                };
            }());

            ko.applyBindings(my.recipeViewModel);
        });
</script>
}